{
    "sourceFile": "src/app/shared/util-component/mat-table/mat-table.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1683641288831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1683641288831,
            "name": "Commit-0",
            "content": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatRow } from '../../model/Mat.model';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\n\n@Component({\n  selector: 'app-mat-table',\n  templateUrl: './mat-table.component.html',\n  styleUrls: ['./mat-table.component.scss']\n})\nexport class MatTableComponent implements OnInit, OnChanges {\n\n  @Input()\n  filterDisplay: number = 0;\n\n  @Input()\n  matRows: MatRow[] = [];\n\n  @Input()\n  pagination: number[] = [5, 10, 25, 100];\n\n  @Input()\n  displayFilter: boolean = false;\n\n  @Input()\n  displayPagination: boolean = false;\n\n  @Output()\n  onEditRow: EventEmitter<MatRow> = new EventEmitter();\n\n  displayedColumns: string[] = [];\n  \n  dataSource = new MatTableDataSource(this.matRows);\n\n  filter?: string;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  ngOnChanges() {\n    this.displayedColumns = [];\n    this.init();\n  }\n\n  init() {\n    if(this.matRows.length > 0) {\n      for (const [key, value] of Object.entries(this.matRows[0])) {\n        this.displayedColumns.push(key.toString())\n      }\n      this.pagination = this.pagination.sort((a, b) => a - b);\n      this.dataSource.data = this.matRows;\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n    }\n  }\n\n  getValue(element: any, key: any): any {\n    for (const [keyT, value] of Object.entries(element)) {\n      if(keyT === key)\n        return value;\n    }\n\n    return \"\";\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  clearFilter() {\n    this.dataSource.filter = '';\n\n    if (this.dataSource.paginator) \n    {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  editRow(row: MatRow) {\n    this.onEditRow.emit(row);\n  }\n}\n"
        }
    ]
}