{
    "sourceFile": "src/app/shared/service/Authenticator.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1682711862532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1682711935672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,32 @@\n   public getCurrentLoginUser(): Observable<User> {\n     return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n   }\n \n+  public getAllUsers(): Observable<User[]> {\n+    return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users`);\n+  }\n \n+  public getUsers(id: number): Observable<User> {\n+    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${id}`);\n+  }\n+\n+  public postUsers(User: User): Observable<User> {\n+    return this.httpClient.post<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users`, User);\n+  }\n+\n+  public putUsers(User: User): Observable<User> {\n+    return this.httpClient.put<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${User.id}`, User);\n+  }\n+\n+  public patchUsers(User: User): Observable<User> {\n+    return this.httpClient.patch<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${User.id}`, User);\n+  }\n+\n+  public deleteUsers(id: number): Observable<void> {\n+    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${id}`);\n+  }\n+\n   //UserRoles\n   public getAllRoles(): Observable<UserRole[]> {\n     return this.httpClient.get<UserRole[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/roles`);\n   }\n"
                },
                {
                    "date": 1682712254493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Router } from '@angular/router';\n import { Jwt, Route, User, UserRole } from '../model/Authenticator.model';\n import { SettingService } from './Setting.service';\n import { Observable, first, interval } from 'rxjs';\n+import { UsernameExistResponse } from '../model/Response.model';\n \n @Injectable({\n   providedIn: 'root'\n })\n@@ -114,8 +115,12 @@\n   public getCurrentLoginUser(): Observable<User> {\n     return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n   }\n \n+  public isUsernameExist(username: string): Observable<UsernameExistResponse> {\n+    return this.httpClient.get<UsernameExistResponse>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/username/${username}`);\n+  }\n+\n   public getAllUsers(): Observable<User[]> {\n     return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users`);\n   }\n \n"
                },
                {
                    "date": 1682742217641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n     return this.httpClient.get<UsernameExistResponse>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/username/${username}`);\n   }\n \n   public getAllUsers(): Observable<User[]> {\n-    return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users`);\n+    return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n   }\n \n   public getUsers(id: number): Observable<User> {\n     return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${id}`);\n"
                },
                {
                    "date": 1682742228598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,25 +124,25 @@\n     return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n   }\n \n   public getUsers(id: number): Observable<User> {\n-    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${id}`);\n+    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${id}`);\n   }\n \n   public postUsers(User: User): Observable<User> {\n-    return this.httpClient.post<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users`, User);\n+    return this.httpClient.post<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`, User);\n   }\n \n   public putUsers(User: User): Observable<User> {\n-    return this.httpClient.put<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${User.id}`, User);\n+    return this.httpClient.put<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${User.id}`, User);\n   }\n \n   public patchUsers(User: User): Observable<User> {\n-    return this.httpClient.patch<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${User.id}`, User);\n+    return this.httpClient.patch<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${User.id}`, User);\n   }\n \n   public deleteUsers(id: number): Observable<void> {\n-    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/Users/${id}`);\n+    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${id}`);\n   }\n \n   //UserRoles\n   public getAllRoles(): Observable<UserRole[]> {\n"
                },
                {
                    "date": 1682742508012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n })\n export class AuthenticatorService {\n \n   jwt?: string | null;\n-  private currentUser: User | undefined | null;\n+  currentUser: User | undefined | null;\n   isLoginB: boolean = false;\n \n   private prefix = \"authenticator\"\n \n"
                },
                {
                    "date": 1682743153954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,19 +74,19 @@\n     );\n   }\n \n   isLoginCallWithReroute(navigate?: string): void {\n-    this.isLogin().pipe(first()).subscribe(\n-      async res => {\n-        this.isLoginB = true;\n-        if(navigate)\n-          this.router.navigate([navigate]);\n-      },\n-      error => {\n-        this.isLoginB = false;\n-        this.router.navigate([\"/login\"]);\n-      }\n-    );\n+    // this.isLogin().pipe(first()).subscribe(\n+    //   async res => {\n+    //     this.isLoginB = true;\n+    //     if(navigate)\n+    //       this.router.navigate([navigate]);\n+    //   },\n+    //   error => {\n+    //     this.isLoginB = false;\n+    //     this.router.navigate([\"/login\"]);\n+    //   }\n+    // );\n   }\n \n   isLogin(): Observable<void> {\n     return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n"
                },
                {
                    "date": 1682743206658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,17 @@\n   login(user: {username: string, password: string}): Observable<Jwt>{\n     return this.httpClient.post<Jwt>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/login`, user);\n   }\n \n-  private async updateUser(): Promise<void>\n+  private async updateUser(): Promise<boolean>\n   {\n-    return new Promise<void>((resolve, reject) => {\n+    return new Promise<boolean>((resolve, reject) => {\n       this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`)\n       .pipe(first()).subscribe(\n         res => {\n           this.currentUser = res;\n           this.isLoginB = true;\n+          resolve(true);\n         },\n         error => {\n           this.currentUser = null;\n           this.isLoginB = false;\n@@ -85,8 +86,10 @@\n     //     this.isLoginB = false;\n     //     this.router.navigate([\"/login\"]);\n     //   }\n     // );\n+\n+\n   }\n \n   isLogin(): Observable<void> {\n     return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n"
                },
                {
                    "date": 1682743234136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,11 @@\n         },\n         error => {\n           this.currentUser = null;\n           this.isLoginB = false;\n+          reject(false);\n         },\n-        () => resolve()\n+        () => resolve(true)\n       );\n     });\n   }\n \n"
                },
                {
                    "date": 1682743267021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         },\n         error => {\n           this.currentUser = null;\n           this.isLoginB = false;\n-          reject(false);\n+          resolve(false);\n         },\n         () => resolve(true)\n       );\n     });\n"
                },
                {
                    "date": 1682743327963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+import { HttpClient, HttpParams } from '@angular/common/http';\n+import { Injectable, OnInit } from '@angular/core';\n+import { Router } from '@angular/router';\n+import { Jwt, Route, User, UserRole } from '../model/Authenticator.model';\n+import { SettingService } from './Setting.service';\n+import { Observable, first, interval } from 'rxjs';\n+import { UsernameExistResponse } from '../model/Response.model';\n+\n+@Injectable({\n+  providedIn: 'root'\n+})\n+export class AuthenticatorService {\n+\n+  jwt?: string | null;\n+  currentUser: User | undefined | null;\n+  isLoginB: boolean = false;\n+\n+  private prefix = \"authenticator\"\n+\n+  constructor(private httpClient: HttpClient, private router: Router, private settingService: SettingService) { \n+    this.jwt = localStorage.getItem(\"jwt\");\n+    setInterval(() => {\n+      this.isLoginCall();\n+    }, 120000); //2 mins\n+  }\n+\n+  healthCheck(): Observable<string> {\n+    return this.httpClient.get<string>(`${this.settingService.getGatewayUrl()}/_status/healthz`);\n+  }\n+\n+  // Authentication\n+  login(user: {username: string, password: string}): Observable<Jwt>{\n+    return this.httpClient.post<Jwt>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/login`, user);\n+  }\n+\n+  private async updateUser(): Promise<boolean>\n+  {\n+    return new Promise<boolean>((resolve, reject) => {\n+      this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`)\n+      .pipe(first()).subscribe(\n+        res => {\n+          this.currentUser = res;\n+          this.isLoginB = true;\n+          resolve(true);\n+        },\n+        error => {\n+          this.currentUser = null;\n+          this.isLoginB = false;\n+          resolve(false);\n+        },\n+        () => resolve(true)\n+      );\n+    });\n+  }\n+\n+  async autoUpdateUserWithJwt(jwt: string): Promise<void>\n+  {\n+    this.jwt = jwt;\n+    localStorage.setItem(\"jwt\", jwt);\n+    await this.autoUpdateUser();\n+  }\n+\n+  async autoUpdateUser(): Promise<void>\n+  {\n+    await this.updateUser().then().catch();\n+  }\n+\n+  isLoginCall(): void {\n+    this.isLogin().pipe(first()).subscribe(\n+      async res => {\n+        this.isLoginB = true\n+      },\n+      error => {\n+        this.isLoginB = false\n+      }\n+    );\n+  }\n+\n+  async isLoginCallWithReroute(navigate?: string): void {\n+    // this.isLogin().pipe(first()).subscribe(\n+    //   async res => {\n+    //     this.isLoginB = true;\n+    //     if(navigate)\n+    //       this.router.navigate([navigate]);\n+    //   },\n+    //   error => {\n+    //     this.isLoginB = false;\n+    //     this.router.navigate([\"/login\"]);\n+    //   }\n+    // );\n+\n+    let isLogin = await this.updateUser();\n+  }\n+\n+  isLogin(): Observable<void> {\n+    return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n+  }\n+\n+  logout(): void {\n+    localStorage.removeItem(\"jwt\");\n+    this.isLoginB = false;\n+    this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/logout`).pipe(first()).subscribe(\n+      res => {},\n+      error => {},\n+      () => {\n+        this.jwt = null;\n+        this.router.navigate([\"/login\"]);\n+      }\n+    );\n+  }\n+\n+  getJwt(): string {\n+    if(this.jwt === null || this.jwt === undefined)\n+      this.router.navigate(['login']);\n+    return this.jwt!;\n+  }\n+\n+  // USERs\n+  public getCurrentLoginUser(): Observable<User> {\n+    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n+  }\n+\n+  public isUsernameExist(username: string): Observable<UsernameExistResponse> {\n+    return this.httpClient.get<UsernameExistResponse>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/username/${username}`);\n+  }\n+\n+  public getAllUsers(): Observable<User[]> {\n+    return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n+  }\n+\n+  public getUsers(id: number): Observable<User> {\n+    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${id}`);\n+  }\n+\n+  public postUsers(User: User): Observable<User> {\n+    return this.httpClient.post<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`, User);\n+  }\n+\n+  public putUsers(User: User): Observable<User> {\n+    return this.httpClient.put<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${User.id}`, User);\n+  }\n+\n+  public patchUsers(User: User): Observable<User> {\n+    return this.httpClient.patch<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${User.id}`, User);\n+  }\n+\n+  public deleteUsers(id: number): Observable<void> {\n+    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${id}`);\n+  }\n+\n+  //UserRoles\n+  public getAllRoles(): Observable<UserRole[]> {\n+    return this.httpClient.get<UserRole[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/roles`);\n+  }\n+\n+  //Routes\n+  public getAllRoutes(): Observable<Route[]> {\n+    return this.httpClient.get<Route[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes`);\n+  }\n+\n+  public getRoutes(id: number): Observable<Route> {\n+    return this.httpClient.get<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${id}`);\n+  }\n+\n+  public postRoutes(route: Route): Observable<Route> {\n+    return this.httpClient.post<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes`, route);\n+  }\n+\n+  public putRoutes(route: Route): Observable<Route> {\n+    return this.httpClient.put<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${route.id}`, route);\n+  }\n+\n+  public patchRoutes(route: Route): Observable<Route> {\n+    return this.httpClient.patch<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${route.id}`, route);\n+  }\n+\n+  public deleteRoutes(id: number): Observable<void> {\n+    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${id}`);\n+  }\n+}\n"
                },
                {
                    "date": 1682743338486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       }\n     );\n   }\n \n-  async isLoginCallWithReroute(navigate?: string): void {\n+  async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n     //   async res => {\n     //     this.isLoginB = true;\n     //     if(navigate)\n@@ -89,190 +89,12 @@\n     //   }\n     // );\n \n     let isLogin = await this.updateUser();\n-  }\n \n-  isLogin(): Observable<void> {\n-    return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n+    if\n   }\n \n-  logout(): void {\n-    localStorage.removeItem(\"jwt\");\n-    this.isLoginB = false;\n-    this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/logout`).pipe(first()).subscribe(\n-      res => {},\n-      error => {},\n-      () => {\n-        this.jwt = null;\n-        this.router.navigate([\"/login\"]);\n-      }\n-    );\n-  }\n-\n-  getJwt(): string {\n-    if(this.jwt === null || this.jwt === undefined)\n-      this.router.navigate(['login']);\n-    return this.jwt!;\n-  }\n-\n-  // USERs\n-  public getCurrentLoginUser(): Observable<User> {\n-    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n-  }\n-\n-  public isUsernameExist(username: string): Observable<UsernameExistResponse> {\n-    return this.httpClient.get<UsernameExistResponse>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/username/${username}`);\n-  }\n-\n-  public getAllUsers(): Observable<User[]> {\n-    return this.httpClient.get<User[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n-  }\n-\n-  public getUsers(id: number): Observable<User> {\n-    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${id}`);\n-  }\n-\n-  public postUsers(User: User): Observable<User> {\n-    return this.httpClient.post<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`, User);\n-  }\n-\n-  public putUsers(User: User): Observable<User> {\n-    return this.httpClient.put<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${User.id}`, User);\n-  }\n-\n-  public patchUsers(User: User): Observable<User> {\n-    return this.httpClient.patch<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${User.id}`, User);\n-  }\n-\n-  public deleteUsers(id: number): Observable<void> {\n-    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users/${id}`);\n-  }\n-\n-  //UserRoles\n-  public getAllRoles(): Observable<UserRole[]> {\n-    return this.httpClient.get<UserRole[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/roles`);\n-  }\n-\n-  //Routes\n-  public getAllRoutes(): Observable<Route[]> {\n-    return this.httpClient.get<Route[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes`);\n-  }\n-\n-  public getRoutes(id: number): Observable<Route> {\n-    return this.httpClient.get<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${id}`);\n-  }\n-\n-  public postRoutes(route: Route): Observable<Route> {\n-    return this.httpClient.post<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes`, route);\n-  }\n-\n-  public putRoutes(route: Route): Observable<Route> {\n-    return this.httpClient.put<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${route.id}`, route);\n-  }\n-\n-  public patchRoutes(route: Route): Observable<Route> {\n-    return this.httpClient.patch<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${route.id}`, route);\n-  }\n-\n-  public deleteRoutes(id: number): Observable<void> {\n-    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${id}`);\n-  }\n-}\n-import { HttpClient, HttpParams } from '@angular/common/http';\n-import { Injectable, OnInit } from '@angular/core';\n-import { Router } from '@angular/router';\n-import { Jwt, Route, User, UserRole } from '../model/Authenticator.model';\n-import { SettingService } from './Setting.service';\n-import { Observable, first, interval } from 'rxjs';\n-import { UsernameExistResponse } from '../model/Response.model';\n-\n-@Injectable({\n-  providedIn: 'root'\n-})\n-export class AuthenticatorService {\n-\n-  jwt?: string | null;\n-  currentUser: User | undefined | null;\n-  isLoginB: boolean = false;\n-\n-  private prefix = \"authenticator\"\n-\n-  constructor(private httpClient: HttpClient, private router: Router, private settingService: SettingService) { \n-    this.jwt = localStorage.getItem(\"jwt\");\n-    setInterval(() => {\n-      this.isLoginCall();\n-    }, 120000); //2 mins\n-  }\n-\n-  healthCheck(): Observable<string> {\n-    return this.httpClient.get<string>(`${this.settingService.getGatewayUrl()}/_status/healthz`);\n-  }\n-\n-  // Authentication\n-  login(user: {username: string, password: string}): Observable<Jwt>{\n-    return this.httpClient.post<Jwt>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/login`, user);\n-  }\n-\n-  private async updateUser(): Promise<boolean>\n-  {\n-    return new Promise<boolean>((resolve, reject) => {\n-      this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`)\n-      .pipe(first()).subscribe(\n-        res => {\n-          this.currentUser = res;\n-          this.isLoginB = true;\n-          resolve(true);\n-        },\n-        error => {\n-          this.currentUser = null;\n-          this.isLoginB = false;\n-          resolve(false);\n-        },\n-        () => resolve(true)\n-      );\n-    });\n-  }\n-\n-  async autoUpdateUserWithJwt(jwt: string): Promise<void>\n-  {\n-    this.jwt = jwt;\n-    localStorage.setItem(\"jwt\", jwt);\n-    await this.autoUpdateUser();\n-  }\n-\n-  async autoUpdateUser(): Promise<void>\n-  {\n-    await this.updateUser().then().catch();\n-  }\n-\n-  isLoginCall(): void {\n-    this.isLogin().pipe(first()).subscribe(\n-      async res => {\n-        this.isLoginB = true\n-      },\n-      error => {\n-        this.isLoginB = false\n-      }\n-    );\n-  }\n-\n-  isLoginCallWithReroute(navigate?: string): void {\n-    // this.isLogin().pipe(first()).subscribe(\n-    //   async res => {\n-    //     this.isLoginB = true;\n-    //     if(navigate)\n-    //       this.router.navigate([navigate]);\n-    //   },\n-    //   error => {\n-    //     this.isLoginB = false;\n-    //     this.router.navigate([\"/login\"]);\n-    //   }\n-    // );\n-\n-\n-  }\n-\n   isLogin(): Observable<void> {\n     return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n   }\n \n"
                },
                {
                    "date": 1682743369623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,12 @@\n     // );\n \n     let isLogin = await this.updateUser();\n \n-    if\n+    if(isLogin)\n+      this.router.navigate([navigate]);\n+    else\n+      this.router.navigate([\"/login\"]);\n   }\n \n   isLogin(): Observable<void> {\n     return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n"
                },
                {
                    "date": 1682743437495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,17 +64,19 @@\n   {\n     await this.updateUser().then().catch();\n   }\n \n-  isLoginCall(): void {\n-    this.isLogin().pipe(first()).subscribe(\n-      async res => {\n-        this.isLoginB = true\n-      },\n-      error => {\n-        this.isLoginB = false\n-      }\n-    );\n+  async isLoginCall(): Promise<void> {\n+    // this.isLogin().pipe(first()).subscribe(\n+    //   async res => {\n+    //     this.isLoginB = true\n+    //   },\n+    //   error => {\n+    //     this.isLoginB = false\n+    //   }\n+    // );\n+\n+    let isLogin = await this.updateUser();\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n"
                },
                {
                    "date": 1682743456937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   {\n     await this.updateUser().then().catch();\n   }\n \n-  async isLoginCall(): Promise<void> {\n+  isLoginCall(): void {\n     // this.isLogin().pipe(first()).subscribe(\n     //   async res => {\n     //     this.isLoginB = true\n     //   },\n@@ -74,9 +74,9 @@\n     //     this.isLoginB = false\n     //   }\n     // );\n \n-    let isLogin = await this.updateUser();\n+    this.updateUser();\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n"
                },
                {
                    "date": 1682743641809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,13 +91,15 @@\n     //   }\n     // );\n \n     let isLogin = await this.updateUser();\n+    this.isLoginB = isLogin;\n \n     if(isLogin)\n       this.router.navigate([navigate]);\n     else\n       this.router.navigate([\"/login\"]);\n+\n   }\n \n   isLogin(): Observable<void> {\n     return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n"
                },
                {
                    "date": 1682743673676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     //     this.isLoginB = false\n     //   }\n     // );\n \n-    this.updateUser();\n+    this.updateUser().then(b => this.isLoginB = b);\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n"
                },
                {
                    "date": 1682743715531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   {\n     await this.updateUser().then().catch();\n   }\n \n-  isLoginCall(): void {\n+  async isLoginCall(): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n     //   async res => {\n     //     this.isLoginB = true\n     //   },\n@@ -74,9 +74,9 @@\n     //     this.isLoginB = false\n     //   }\n     // );\n \n-    this.updateUser().then(b => this.isLoginB = b);\n+    await this.updateUser().then(b => this.isLoginB = b);\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n"
                },
                {
                    "date": 1682743724703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   {\n     await this.updateUser().then().catch();\n   }\n \n-  async isLoginCall(): Promise<void> {\n+  isLoginCall(): void {\n     // this.isLogin().pipe(first()).subscribe(\n     //   async res => {\n     //     this.isLoginB = true\n     //   },\n@@ -74,9 +74,9 @@\n     //     this.isLoginB = false\n     //   }\n     // );\n \n-    await this.updateUser().then(b => this.isLoginB = b);\n+    this.updateUser().then(b => this.isLoginB = b);\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n"
                },
                {
                    "date": 1682743736190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   {\n     await this.updateUser().then().catch();\n   }\n \n-  isLoginCall(): void {\n+  async isLoginCall(): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n     //   async res => {\n     //     this.isLoginB = true\n     //   },\n@@ -74,9 +74,9 @@\n     //     this.isLoginB = false\n     //   }\n     // );\n \n-    this.updateUser().then(b => this.isLoginB = b);\n+    await this.updateUser().then(b => this.isLoginB = b);\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n     // this.isLogin().pipe(first()).subscribe(\n"
                },
                {
                    "date": 1682743758608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     //   error => {\n     //     this.isLoginB = false\n     //   }\n     // );\n-\n+    \n     await this.updateUser().then(b => this.isLoginB = b);\n   }\n \n   async isLoginCallWithReroute(navigate?: string): Promise<void> {\n"
                }
            ],
            "date": 1682711862532,
            "name": "Commit-0",
            "content": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Jwt, Route, User, UserRole } from '../model/Authenticator.model';\nimport { SettingService } from './Setting.service';\nimport { Observable, first, interval } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticatorService {\n\n  jwt?: string | null;\n  private currentUser: User | undefined | null;\n  isLoginB: boolean = false;\n\n  private prefix = \"authenticator\"\n\n  constructor(private httpClient: HttpClient, private router: Router, private settingService: SettingService) { \n    this.jwt = localStorage.getItem(\"jwt\");\n    setInterval(() => {\n      this.isLoginCall();\n    }, 120000); //2 mins\n  }\n\n  healthCheck(): Observable<string> {\n    return this.httpClient.get<string>(`${this.settingService.getGatewayUrl()}/_status/healthz`);\n  }\n\n  // Authentication\n  login(user: {username: string, password: string}): Observable<Jwt>{\n    return this.httpClient.post<Jwt>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/login`, user);\n  }\n\n  private async updateUser(): Promise<void>\n  {\n    return new Promise<void>((resolve, reject) => {\n      this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`)\n      .pipe(first()).subscribe(\n        res => {\n          this.currentUser = res;\n          this.isLoginB = true;\n        },\n        error => {\n          this.currentUser = null;\n          this.isLoginB = false;\n        },\n        () => resolve()\n      );\n    });\n  }\n\n  async autoUpdateUserWithJwt(jwt: string): Promise<void>\n  {\n    this.jwt = jwt;\n    localStorage.setItem(\"jwt\", jwt);\n    await this.autoUpdateUser();\n  }\n\n  async autoUpdateUser(): Promise<void>\n  {\n    await this.updateUser().then().catch();\n  }\n\n  isLoginCall(): void {\n    this.isLogin().pipe(first()).subscribe(\n      async res => {\n        this.isLoginB = true\n      },\n      error => {\n        this.isLoginB = false\n      }\n    );\n  }\n\n  isLoginCallWithReroute(navigate?: string): void {\n    this.isLogin().pipe(first()).subscribe(\n      async res => {\n        this.isLoginB = true;\n        if(navigate)\n          this.router.navigate([navigate]);\n      },\n      error => {\n        this.isLoginB = false;\n        this.router.navigate([\"/login\"]);\n      }\n    );\n  }\n\n  isLogin(): Observable<void> {\n    return this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth`);\n  }\n\n  logout(): void {\n    localStorage.removeItem(\"jwt\");\n    this.isLoginB = false;\n    this.httpClient.get<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/auth/logout`).pipe(first()).subscribe(\n      res => {},\n      error => {},\n      () => {\n        this.jwt = null;\n        this.router.navigate([\"/login\"]);\n      }\n    );\n  }\n\n  getJwt(): string {\n    if(this.jwt === null || this.jwt === undefined)\n      this.router.navigate(['login']);\n    return this.jwt!;\n  }\n\n  // USERs\n  public getCurrentLoginUser(): Observable<User> {\n    return this.httpClient.get<User>(`${this.settingService.getGatewayUrl()}/${this.prefix}/users`);\n  }\n\n\n  //UserRoles\n  public getAllRoles(): Observable<UserRole[]> {\n    return this.httpClient.get<UserRole[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/roles`);\n  }\n\n  //Routes\n  public getAllRoutes(): Observable<Route[]> {\n    return this.httpClient.get<Route[]>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes`);\n  }\n\n  public getRoutes(id: number): Observable<Route> {\n    return this.httpClient.get<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${id}`);\n  }\n\n  public postRoutes(route: Route): Observable<Route> {\n    return this.httpClient.post<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes`, route);\n  }\n\n  public putRoutes(route: Route): Observable<Route> {\n    return this.httpClient.put<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${route.id}`, route);\n  }\n\n  public patchRoutes(route: Route): Observable<Route> {\n    return this.httpClient.patch<Route>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${route.id}`, route);\n  }\n\n  public deleteRoutes(id: number): Observable<void> {\n    return this.httpClient.delete<void>(`${this.settingService.getGatewayUrl()}/${this.prefix}/routes/${id}`);\n  }\n}\n"
        }
    ]
}